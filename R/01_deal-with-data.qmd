---
title: "Data wrangling"
format: html
params:
    reserve: "NIW"
---

## Setup  

```{r, warning = FALSE}
library(readxl)
library(tidyverse)

file_dat <- here::here("data", paste0(params$reserve, "_NMST.xlsx"))
file_specs <- here::here("metadata", paste0(params$reserve, "veg_metadata.xlsx"))

source(here::here("R", "functions.R"))
```

## Prepare data frames  

### Read in  

```{r}
dat <- get_data(file_dat, cover_only = TRUE) # gets rid of density and height columns; keeps F_ columns
stn_tbl <- get_stn_table(file_dat)
species_info <- get_species_info(file_dat)
# eis <- get_eis(file_specs)  # ecotone invaders
```

### Remove Unsampled Plots  

```{r}
dat <- remove_unsampleds(dat)
```


### Replace NA cover readings with 0  

```{r}
dat <- na_to_0(dat)
```


### Remove data points that don't pass QA/QC checks  


```{r}
# modified from SWMPr::qaqcchk()
# https://github.com/fawda123/SWMPr/blob/master/R/qaqcchk.R
 # qaqc flag columns

  # qaqc_ind <- grep('^F_', names(data))
  # qaqc <- data[, qaqc_ind]
  # 
  # # summarize number of qaqc flags by column
  # out <- lapply(c(qaqc), table)
  # 
  # # format output as data.frame
  # out <- reshape2::melt(out)
  # names(out) <- c('flag', 'count', 'variable')
  # out <- tidyr::spread(out, 'variable', 'count')
  # out[is.na(out)] <- 0
  
```


```{r}
# or from SWMPr::qaqc  
# https://github.com/fawda123/SWMPr/blob/master/R/qaqc.R
# which seems to match positionally, which in theory will work on our data frames but in practice I'm too worried about copy-paste errors in the F_ columns so I'd rather match by name

# but the structure could work - splitting off the qaqc columns
# especially if I then strip "F_" from the column name  

```

```{r}
dat <- remove_suspect_values(dat, flags = c("1", "-3"))
```


MAY NEED TO re-remove rows of NA values, if a reserve marked all values as NA for a sample  



### add Vegetation Zone to dat  

```{r}
dat <- join_zones(dat, stn_tbl)
```


## Calculate group totals  

```{r}
cat_sums <- sum_spp_categories(data = dat)
```

### Join to sampling info  

```{r}
dat_summ <- cbind(dat[, 1:which(names(dat) == "Notes")], cat_sums)
names(dat_summ)[which(is.na(names(dat_summ)))] <- "Other"
```

### Pivot longer for easier plotting  

```{r}
dat_summ2 <- dat_summ %>% 
    pivot_longer(-(Reserve:Notes),
                 names_to = "Group",
                 values_to = "Cover")
```

Need to do something about NMST abiotic categories, unknown species, unvegetated, etc.  

Probably want data frames by:  

-  species (original)  
-  vegetation group  
-  with custom metrics  


## Plot groups through time  


```{r}
plot_through_time(data = dat_summ2, group = Group, panels = Vegetation_Zone) + ggtitle("By Zone")
```

```{r}
plot_through_time(data = dat_summ2, group = Group, panels = SiteID) + ggtitle("By Site")
```

```{r}
plot_through_time(data = dat_summ2, group = Vegetation_Zone, panels = Group) + ggtitle("By Species Group")
```


Test that function out on raw species data  

Too many species (but this is why we had Reserves identify which ones are most important)  

```{r}
dat_long <- dat %>%
    pivot_longer(-(Reserve:Notes),
                 names_to = "Species",
                 values_to = "Cover")
```

```{r}
plot_through_time(data = dat_long,
          group = Species,
          panels = Vegetation_Zone)
```


### Try combining species  

```{r}
top_5_mean <- lump_species(dat_long, "mean", 5)
top_5_quantile <- lump_species(dat_long, "quantile", 5)
top_5_nonzero <- lump_species(dat_long, "nonzero", 5)
```

```{r}
plot_through_time(data = top_5_mean,
          group = Species,
          panels = Vegetation_Zone) +
    ggtitle("Top 5 species by mean cover")
```


```{r}
plot_through_time(data = top_5_quantile,
          group = Species,
          panels = Vegetation_Zone) +
    ggtitle("Top 5 species by highest 95th percentile of cover")
```

```{r}
plot_through_time(data = top_5_nonzero,
          group = Species,
          panels = Vegetation_Zone) +
    ggtitle("Top 5 species - most often detected")
```


## Plot overall  

(same as above, just not by zone or site - all on one)  

```{r}
ggplot(dat_summ2, aes(x = Year, y = Cover, 
                     group = Group, color = Group, fill = Group)) +
        geom_point() +
        geom_smooth(method = "loess", se = FALSE) +
    ggtitle("across all plots")
```



***  
***  



## Add Ecotone Invader column  

```{r}
# dat_long2 <- left_join(dat_long2, eis)
```

```{r}
# names(eis)[2] <- "eiID"
```

need to know - is `eiID` a species, or a group?  

```{r}
# eis$Species <- eis$eiID %in% species_info$Species
# eis$Group <- eis$eiID %in% species_info$Plant_Categories
```


need Species Group *in* `dat_long` OR need all species in a group in the `eis` data frame, with corresponding vegetation zone.  


```{r}
# ei_spps <- get_ei_spps_from_groups()
# eis <- bind_rows(eis, ei_spps) %>% 
#     filter(Species == TRUE) %>% 
#     distinct() %>% 
#     select(-Species, -Group) %>% 
#     rename(Species = eiID)
```

USING NEW FUNCTION  

```{r}
eis <- get_ecotone_invaders(file = file_specs)
```


```{r}
dat_long <- dat_long %>% 
    left_join(eis) %>% 
    mutate(Invader = case_when(is.na(Invader) ~ 0,
                               .default = 1))

EIR <- dat_long %>% 
    select(Reserve:PlotID,
           Species,
           Cover,
           Invader) %>% 
    mutate(EI_Cover = Cover * Invader) %>% 
    group_by(Year, Month, Day, Reserve, SiteID, TransectID, PlotID) %>% 
    summarize(EIR = round(sum(EI_Cover) / sum(Cover), 5))
# confirmed at April TWG that denominator is total cover

dat <- left_join(dat, EIR)
```

## Plot EIR  

```{r}
ggplot(dat) +
    geom_histogram(aes(x = EIR, fill = Vegetation_Zone),
                   col = "gray40",
                   binwidth = 0.1) +
    facet_wrap(~Vegetation_Zone) +
    labs(title = "Histogram of EIR by Marsh Zone") +
    theme(legend.position = "none")
```


```{r}
ggplot(dat) +
    geom_jitter(aes(x = Year, y = EIR, color = Vegetation_Zone)) +
    facet_wrap(~Vegetation_Zone) +
    theme(legend.position = "none") +
    labs(title = "EIR")
```

```{r}
ggplot(dat) +
    geom_jitter(aes(x = Year, y = EIR, color = SiteID)) +
    facet_wrap(~Vegetation_Zone) +
    # theme(legend.position = "none") +
    labs(title = "EIR")
```
